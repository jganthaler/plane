// FUNCTIONS
// ---------------------------------------------------------------------------

/// Returns the number without unit
@function strip-unit($number) {
    @return $number / ($number * 0 + 1);
}

/// Converts a map to a list
@function map-to-list($map, $keep: 'both') {
    $keep: if(index('keys' 'values', $keep), $keep, 'both');

    @if type-of($map) == 'map' {
        $keys: ();
        $values: ();

        @each $key, $val in $map {
            $keys: append($keys, $key);
            $values: append($values, $val);
        }

        @if $keep == 'keys' {
            @return $keys;
        } @else if $keep == 'values' {
            @return $values;
        } @else {
            @return zip($keys, $values);
        }
    }
    @return if(type-of($map) != 'list', ($value,), $map);
}

/// Converts a pixel value to matching rem value.
@function to-rem($value, $base: null) {
    // Check if the value is a number
    @if type-of($value) != 'number' {
        @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
        @return $value;
    }

    // Transform em into rem if someone hands over 'em's
    @if unit($value) == 'em' {
        $value: strip-unit($value) * 1rem;
    }

    // Calculate rem if units for $value is not rem or em
    @if unit($value) != 'rem' {
        $value: strip-unit($value) / strip-unit($base) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0rem {
        $value: 0;
    }

    @return $value;
}

// Converts a unitless, pixel, or rem value to em, for use in breakpoints.
@function bp-to-em($value) {
    // Pixel and unitless values are converted to rems
    @if unit($value) == 'px' or unitless($value) {
        $value: rem-calc($value, $base: 16px);
    }

    // Then the value is converted to ems
    @return strip-unit($value) * 1em;
}

/// Converts one or more pixel values into matching rem values.
@function rem-calc($values, $base: null) {
    $rem-values: ();
    $count: length($values);

    // If no base is defined, defer to the global font size
    @if $base == null {
        $base: $global-font-size;
    }

    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most all browsers
    @if unit($base) == '%' {
        $base: ($base / 100%) * 16px;
    }

    // Using rem as base allows correct scaling
    @if unit($base) == 'rem' {
        $base: strip-unit($base) * 16px;
    }

    @if $count == 1 {
        @return to-rem($values, $base);
    }

    @for $i from 1 through $count {
        $rem-values: append($rem-values, to-rem(nth($values, $i), $base));
    }

    @return $rem-values;
}

/// Generates a media query string matching the input value.
@function breakpoint($val: $zero-breakpoint) {
    // Size or keyword
    $bp: nth($val, 1);
    // Value for max-width media queries
    $bp-max: 0;
    // Direction of media query (up, down, or only)
    $dir: if(length($val) > 1, nth($val, 2), up);
    // Eventual output
    $str: '';
    // Is it a named media query?
    $named: false;

    // Orientation media queries have a unique syntax
    @if $bp == 'landscape' or $bp == 'portrait' {
        @return '(orientation: #{$bp})';
    } @else if $bp == 'retina' {
        @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';
    }

    // Try to pull a named breakpoint out of the $breakpoints map
    @if type-of($bp) == 'string' {
        @if map-has-key($breakpoints, $bp) {
            $bp: map-get($breakpoints, $bp);
            $named: true;
        } @else {
            $bp: 0;
            @warn 'breakpoint(): "#{$val}" is not defined in your $breakpoints setting.';
        }
    }

    // Convert any pixel, rem, or unitless value to em
    $bp: bp-to-em($bp);
    // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).
    // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.
    // See https://github.com/zurb/foundation-sites/issues/11313
    @if $bp-max {
        $bp-max: bp-to-em($bp-max) - .00125;
    }

    // Conditions to skip media query creation
    // - It's a named breakpoint that resolved to "0 down" or "0 up"
    // - It's a numeric breakpoint that resolved to "0 " + anything
    @if $bp > 0em or $dir == 'only' or $dir == 'down' {
        // `only` ranges use the format `(min-width: n) and (max-width: n)`
        @if $dir == 'only' {
            // Only named media queries can have an "only" range
            @if $named == true {
                // Only use "min-width" if the floor is greater than 0
                @if $bp > 0em {
                    $str: $str + '(min-width: #{$bp})';

                    // Only add "and" to the media query if there's a ceiling
                    @if $bp-max != null {
                        $str: $str + ' and ';
                    }
                }

                // Only use "max-width" if there's a ceiling
                @if $bp-max != null {
                    $str: $str + '(max-width: #{$bp-max})';
                }
            } @else {
                @warn 'breakpoint(): Only named media queries can have an `only` range.';
            }
        }

            // `down` ranges use the format `(max-width: n)`
        @else if $dir == 'down' {
            $max: if($named, $bp-max, $bp);

            // Skip media query creation if input value is exactly "0 down",
            // unless the function was called as "small down", in which case it's just "small only"
            @if $named or $bp > 0em {
                @if $max != null {
                    $str: $str + '(max-width: #{$max})';
                }
            }
        }

            // `up` ranges use the format `(min-width: n)`
        @else if $bp > 0em {
            $str: $str + '(min-width: #{$bp})';
        }
    }

    @return $str;
}